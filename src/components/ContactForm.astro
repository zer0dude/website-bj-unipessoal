---
import { getCurrentLocale, getTranslation } from '../i18n/translations';

const locale = getCurrentLocale(Astro.url);
const t = (key: string) => getTranslation(locale, key);
---

<section id="contact" class="contact-section">
  <div class="content-container">
    <h3>{t('contact.title')}</h3>
    <p class="section-description">{t('contact.description')}</p>
    
    <div class="contact-content">
      <div class="contact-info">
        <div class="contact-item">
          <div class="mini-label-white">{t('contact.email.label')}</div>
          <a href="mailto:bj@just-forward.com" class="contact-link">bj@just-forward.com</a>
        </div>
      </div>
      
      <form id="contact-form" class="contact-form">
        <!-- Message Display Area -->
        <div id="form-message" class="form-message" style="display: none;">
          <p id="message-text"></p>
        </div>
        
        <div class="form-group">
          <label for="from_name" class="form-label">{t('contact.form.name.label')}</label>
          <input 
            type="text" 
            id="from_name" 
            name="from_name" 
            class="form-input" 
            placeholder={t('contact.form.name.placeholder')}
            required 
          />
        </div>
        
        <div class="form-group">
          <label for="from_email" class="form-label">{t('contact.form.email.label')}</label>
          <input 
            type="email" 
            id="from_email" 
            name="from_email" 
            class="form-input" 
            placeholder={t('contact.form.email.placeholder')}
            required 
          />
        </div>
        
        <div class="form-group">
          <label for="message" class="form-label">{t('contact.form.message.label')}</label>
          <textarea 
            id="message" 
            name="message" 
            class="form-textarea" 
            placeholder={t('contact.form.message.placeholder')}
            rows="5"
            required
          ></textarea>
        </div>
        
        <button type="submit" id="submit-button" class="button form-button">
          <span id="button-text">{t('contact.form.submit')}</span>
        </button>
      </form>
    </div>
  </div>
</section>

<!-- Hidden fields for translations -->
<div style="display: none;" id="translations" 
     data-sending={t('contact.form.sending')}
     data-success={t('contact.form.success')}
     data-error={t('contact.form.error')}
     data-submit={t('contact.form.submit')}>
</div>

<script>
  import emailjs from '@emailjs/browser';

  document.addEventListener('DOMContentLoaded', function() {
    // Get environment variables
    const serviceId = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID;
    const templateId = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID;
    const publicKey = import.meta.env.PUBLIC_EMAILJS_PUBLIC_KEY;

    // Initialize EmailJS
    emailjs.init(publicKey);

    // Get form elements
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const buttonText = document.getElementById('button-text') as HTMLSpanElement;
    const messageDiv = document.getElementById('form-message') as HTMLDivElement;
    const messageText = document.getElementById('message-text') as HTMLParagraphElement;
    
    // Get translations
    const translations = document.getElementById('translations');
    const sendingText = translations?.dataset.sending || 'Sending...';
    const successText = translations?.dataset.success || 'Message sent successfully!';
    const errorText = translations?.dataset.error || 'Something went wrong. Please try again.';
    const submitText = translations?.dataset.submit || 'Send Message';

    // Form submission handler
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Disable form and show loading state
      submitButton.disabled = true;
      buttonText.textContent = sendingText;
      messageDiv.style.display = 'none';
      
      try {
        // Get form data
        const formData = new FormData(form);
        const templateParams = {
          from_name: formData.get('from_name'),
          from_email: formData.get('from_email'),
          message: formData.get('message'),
          from_website: window.location.hostname
        };

        // Send email via EmailJS
        await emailjs.send(serviceId, templateId, templateParams);
        
        // Show success message
        showMessage(successText, 'success');
        
        // Reset form
        form.reset();
        
      } catch (error) {
        console.error('EmailJS Error:', error);
        
        // Show error message
        showMessage(errorText, 'error');
      } finally {
        // Reset button state
        submitButton.disabled = false;
        buttonText.textContent = submitText;
      }
    });

    // Helper function to show messages
    function showMessage(message: string, type: 'success' | 'error') {
      messageText.textContent = message;
      messageDiv.className = `form-message form-message-${type}`;
      messageDiv.style.display = 'block';
      
      // Auto-hide message after 5 seconds
      setTimeout(() => {
        messageDiv.style.display = 'none';
      }, 5000);
    }
  });
</script>
